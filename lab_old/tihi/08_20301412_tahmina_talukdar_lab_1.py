# -*- coding: utf-8 -*-
"""08_20301412_Tahmina Talukdar_lab 1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uKA_EOyicMJeu7Fcywb25xvpUQKmnHBj
"""

import heapq

class Graph:
    def __init__(self):
        self.nodes = {}

    def add_node(self, city, heuristic):
        self.nodes[city] = {'heuristic': heuristic, 'neighbors': {}}
                                                                      #neighbour dictionary , key = neighbour city, value =distance between the two cities.
    def add_edge(self, city1, city2, distance):
        self.nodes[city1]['neighbors'][city2] = distance
        self.nodes[city2]['neighbors'][city1] = distance

def read_input_file(filename):
    graph = Graph()
    with open(filename, 'r') as f:
        for line in f:
            parts = line.split()
            city = parts[0]
            heuristic = int(parts[1])
            if city not in graph.nodes:
                graph.add_node(city, heuristic)
            for i in range(2, len(parts), 2):
                neighbor = parts[i]
                distance = int(parts[i+1])
                if neighbor not in graph.nodes:
                    graph.add_node(neighbor, 0)
                graph.add_edge(city, neighbor, distance)
    return graph

def a_star_search(graph, start, goal):
    frontier = []     #set of all nodes that have been discovered but not yet explored
    heapq.heappush(frontier, (0, start))
    came_from = {}     #keep track of the path from the starting node to each explored node.
    cost_so_far = {}   #keep track of the total cost of the path from the starting node to each explored node.
    came_from[start] = None
    cost_so_far[start] = 0

    while frontier:
        current = heapq.heappop(frontier)[1]

        if current == goal:
            break

        for neighbor, distance in graph.nodes[current]['neighbors'].items():
            new_cost = cost_so_far[current] + distance

            if neighbor not in cost_so_far or new_cost < cost_so_far[neighbor]:
                cost_so_far[neighbor] = new_cost
                priority = new_cost + graph.nodes[neighbor]['heuristic']
                heapq.heappush(frontier, (priority, neighbor))
                came_from[neighbor] = current

    if goal not in came_from:
        print("NO PATH FOUND")
        return None

    path = [goal]
    current = goal
    while current != start:
        current = came_from[current]
        path.append(current)
    path.reverse()
    return path, cost_so_far[goal]


filename = 'input.txt'
graph = read_input_file(filename)

start = input("Start node: ")
goal = input("Destination: ")

path, total_distance = a_star_search(graph, start, goal)


if path is not None:
    print("Path: ", " -> ".join(path))
    print("Total distance: ", total_distance, "km")



