# -*- coding: utf-8 -*-
"""08_20301412_Tahmina Talukdar_lab 2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ayZyHYEm7NrPTPHERlUkDs9MEEb0qlB7
"""

import random
def Alpha_beta_prunning(depth, alpha, beta, max_depth, defender_hp, bullet_choices, min_hp, max_hp, count=0):
    if depth == max_depth:
        return defender_hp, count

    max_utility = float('-inf')         #maximum utility achieved so far by the defender
    for bullet in range(1, bullet_choices+1):
        attacker_utility = float('inf')   #minimum utility achieved so far by the attacker.
        for hp in range(min_hp, max_hp+1):
            new_defender_hp = defender_hp - hp          #new defender hp = left life, #hp = attcks
            if new_defender_hp <= 0:        #If the new defender's HP is 0 or negative, it means that the defender has been defeated
                return float('-inf'), count
            attacker_utility = min(attacker_utility, Alpha_beta_prunning(depth + 1, alpha, beta, max_depth, new_defender_hp, bullet_choices, min_hp, max_hp, count)[0])
            beta = min(beta, attacker_utility)
            if alpha >= beta:
                count += 1
                break
            max_utility = max(max_utility, attacker_utility)
            alpha = max(alpha, max_utility)
            if alpha >= beta:
               count += 1
               break
    return max_utility, count, new_defender_hp

def get_terminal_states(num_states, min_hp, max_hp):               #for leaf node values
    return [random.randint(min_hp, max_hp) for _ in range(num_states)]


def get_input():
    student_id = input("Enter your student id: ").strip()
    num_turns = int(student_id[0])
    defender_hp = int(student_id[-2:])
    bullet_choices = int(student_id[2])
    min_hp, max_hp = map(int, input("Minimum and Maximum value for the range of negative HP: ").strip().split())
    return num_turns, defender_hp, bullet_choices, min_hp, max_hp


def main():
    num_turns, defender_hp, bullet_choices, min_hp, max_hp = get_input()
    depth = num_turns * 2
    terminal_states = get_terminal_states(bullet_choices ** depth, min_hp, max_hp)
    print(f"Depth and Branches ratio is {depth}:{bullet_choices}")
    print(f"Terminal States (leaf node values) are {', '.join(map(str, terminal_states))}.")
    max_negative_hp, count, new_defender_hp = Alpha_beta_prunning(0, float('-inf'), float('inf'), depth, defender_hp, bullet_choices, min_hp, max_hp)
    print(f"Left life(HP) of the defender after maximum damage caused by the attacker is {new_defender_hp}")
    print(f"After Alpha-Beta Pruning, Leaf Node Comparisons: {(len(terminal_states)-count)}")
    #print(f"Total number of pruned edges: {count}")


if __name__ == '__main__':
    main()